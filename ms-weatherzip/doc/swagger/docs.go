// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Vitor Rodrigues",
            "url": "https://vsouza.rio.br/contact",
            "email": "me@vsouza.rio.br"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/license/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Exibe a saudação \"Enjoy the silence!\"",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Root"
                ],
                "summary": "Exibe uma saudação",
                "responses": {
                    "200": {
                        "description": "Enjoy the silence!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unable to write response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Retorna informações sobre a saúde do serviço, como uso de CPU, memória e tempo de atividade",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Retorna informações sobre a saúde do serviço",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.HealthStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/weather/{cep}": {
            "get": {
                "description": "Consulta o clima atual de uma localidade a partir do CEP. Retorna a cidade e a temperatura atual em Celsius, Fahrenheit e Kelvin.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Weather"
                ],
                "summary": "Consulta o clima atual de uma localidade a partir do CEP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CEP para buscar a temperatura",
                        "name": "cep",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WeatherResponseSummary"
                        }
                    },
                    "404": {
                        "description": "can not find zipcode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "invalid zipcode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "health.CPUStats": {
            "type": "object",
            "properties": {
                "cores": {
                    "type": "integer"
                },
                "percent_used": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            }
        },
        "health.HealthStats": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/health.CPUStats"
                },
                "duration": {
                    "type": "string"
                },
                "memory": {
                    "$ref": "#/definitions/health.MemoryStats"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                }
            }
        },
        "health.MemoryStats": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "free": {
                    "type": "integer"
                },
                "percent_used": {
                    "type": "number"
                },
                "total": {
                    "type": "integer"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "web.WeatherResponseSummary": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "temp_C": {
                    "type": "number"
                },
                "temp_F": {
                    "type": "number"
                },
                "temp_K": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8001",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Weather Zip API",
	Description:      "This is a simple API that, on receiving a (zip code), performs a query for the weather in that location.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
